import { BoardMsgService } from '@/app/service/board-msg.service';
import { resType } from '@/types/response/response';
import { Component, EventEmitter, Input, OnInit, Output, OnDestroy } from '@angular/core';
import { FormControl, FormGroup, Validators } from '@angular/forms';
import { ActivatedRoute } from '@angular/router';
import { Store } from '@ngrx/store';
import { NzMessageService } from 'ng-zorro-antd/message';
import { Observable } from 'rxjs';

@Component({
  selector: 'app-add-msg-form',
  templateUrl: './add-msg-form.component.html',
  styleUrls: ['./add-msg-form.component.scss'],
  standalone: false,
})
export class AddMsgFormComponent implements OnInit, OnDestroy {
  smallSize!: Observable<boolean>;
  @Input()
  articleId = '';
  @Input()
  fatherMsgId = '';
  @Output()
  reloadMsg = new EventEmitter();
  subscriptionList: any[] = [];
  isMsgBoard = false;

  emojiBoardVisible = false;

  emojis: any = `üòÄ,üòÉ,üòÑ,üòÅ,üòÜ,üòÖ,üòÇ,ü§£,ü•≤,ü•π,üòä,üòá,üôÇ,üôÉ,üòâ,üòå,üòç,ü•∞,üòò,üòó,üòô,üòö,üòã,üòõ,üòù,üòú,ü§™,ü§®,üßê,ü§ì,üòé,ü•∏,ü§©,ü•≥,üôÇ‚Äç‚ÜïÔ∏è,üòè,üòí,üôÇ‚Äç‚ÜîÔ∏è,üòû,üòî,üòü,üòï,üôÅ,‚òπÔ∏è,üò£,üòñ,üò´,üò©,ü•∫,üò¢,üò≠,üòÆ‚Äçüí®,üò§,üò†,üò°,ü§¨,ü§Ø,üò≥,ü•µ,ü•∂,üò±,üò®,üò∞,üò•,üòì,ü´£,ü§ó,ü´°,ü§î,ü´¢,ü§≠,ü§´,ü§•,üò∂,üò∂‚Äçüå´Ô∏è,üòê,üòë,üò¨,ü´®,ü´†,üôÑ,üòØ,üò¶,üòß,üòÆ,üò≤,ü•±,üò¥,ü§§,üò™,üòµ,üòµ‚Äçüí´,ü´•,ü§ê,ü•¥,ü§¢,ü§Æ,ü§ß,üò∑,ü§í,ü§ï,ü§ë,ü§†,üòà,üëø,üëπ,üë∫,ü§°,üí©,üëª,üíÄ,‚ò†Ô∏è,üëΩ,üëæ,ü§ñ,üéÉ,üò∫,üò∏,üòπ,üòª,üòº,üòΩ,üôÄ,üòø,üòæ,üëã,ü§ö,üñê,‚úã,üññ,üëå,ü§å,ü§è,‚úåÔ∏è,ü§û,ü´∞,ü§ü,ü§ò,ü§ô,ü´µ,ü´±,ü´≤,ü´∏,ü´∑,ü´≥,ü´¥,üëà,üëâ,üëÜ,üñï,üëá,‚òùÔ∏è,üëç,üëé,‚úä,üëä,ü§õ,ü§ú,üëè,ü´∂,üôå,üëê,ü§≤,ü§ù,üôè,‚úçÔ∏è,üíÖ,ü§≥,üí™,ü¶æ,ü¶µ,ü¶ø,ü¶∂,üë£,üëÇ,ü¶ª,üëÉ,ü´Ä,ü´Å,üß†,ü¶∑,ü¶¥,üëÄ,üëÅ,üëÖ,üëÑ,ü´¶,üíã,ü©∏,üê∂,üê±,üê≠,üêπ,üê∞,ü¶ä,üêª,üêº,üêª‚Äç‚ùÑÔ∏è,üê®,üêØ,ü¶Å,üêÆ,üê∑,üêΩ,üê∏,üêµ,üôà,üôâ,üôä,üêí,üêî,üêß,üê¶,üê¶‚Äç‚¨õ,üê§,üê£,üê•,ü¶Ü,ü¶Ö,ü¶â,ü¶á,üê∫,üêó,üê¥,ü¶Ñ,üêù,ü™±,üêõ,ü¶ã,üêå,üêû,üêú,ü™∞,ü™≤,ü™≥,ü¶ü,ü¶ó,üï∑,üï∏,ü¶Ç,üê¢,üêç,ü¶é,ü¶ñ,ü¶ï,üêô,ü¶ë,ü¶ê,ü¶û,ü¶Ä,ü™º,ü™∏,üê°,üê†,üêü,üê¨,üê≥,üêã,ü¶à,üêä,üêÖ,üêÜ,ü¶ì,ü´è,ü¶ç,ü¶ß,ü¶£,üêò,ü¶õ,ü¶è,üê™,üê´,ü¶í,ü¶ò,ü¶¨,üêÉ,üêÇ,üêÑ,üêé,üêñ,üêè,üêë,ü¶ô,üêê,ü¶å,ü´é,üêï,üê©,ü¶Æ,üêï‚Äçü¶∫,üêà,üêà‚Äç‚¨õ,ü™Ω,ü™∂,üêì,ü¶É,ü¶§,ü¶ö,ü¶ú,ü¶¢,ü™ø,ü¶©,üïä,üêá,ü¶ù,ü¶®,ü¶°,ü¶´,ü¶¶,ü¶•,üêÅ,üêÄ,üêø,ü¶î,üêæ,üêâ,üê≤,üê¶‚Äçüî•,üåµ,üéÑ,üå≤,üå≥,üå¥,ü™π,ü™∫,ü™µ,üå±,üåø,‚òòÔ∏è,üçÄ,üéç,ü™¥,üéã,üçÉ,üçÇ,üçÅ,üçÑ,üçÑ‚Äçüü´,üêö,ü™®,üåæ,üíê,üå∑,ü™∑,üåπ,ü•Ä,üå∫,üå∏,ü™ª,üåº,üåª,üåû,üåù,üåõ,üåú,üåö,üåï,üåñ,üåó,üåò,üåë,üåí,üåì,üåî,üåô,üåé,üåç,üåè,ü™ê,üí´,‚≠êÔ∏è,üåü,‚ú®,‚ö°Ô∏è,‚òÑÔ∏è,üí•,üî•,üå™,üåà,‚òÄÔ∏è,üå§,‚õÖÔ∏è,üå•,‚òÅÔ∏è,üå¶,üåß,‚õà,üå©,üå®,‚ùÑÔ∏è,‚òÉÔ∏è,‚õÑÔ∏è,üå¨,üí®,üíß,üí¶,ü´ß,‚òîÔ∏è,‚òÇÔ∏è,üåä`;

  msgBoardData: FormGroup = new FormGroup({
    name: new FormControl('', [Validators.required, Validators.maxLength(20)]),
    mail: new FormControl('', [Validators.required, Validators.email]),
    website: new FormControl(''),
    content: new FormControl('', [Validators.required]),
  });
  get name() {
    return this.msgBoardData.get('name');
  }
  get mail() {
    return this.msgBoardData.get('mail');
  }
  get content() {
    return this.msgBoardData.get('content');
  }
  sendMsg() {
    if (this.msgBoardData.valid) {
      this.addMsg();
    } else {
      Object.values(this.msgBoardData.controls).forEach((control) => {
        if (control.invalid) {
          control.markAsDirty();
          control.updateValueAndValidity({ onlySelf: true });
        }
      });
      this.message.warning('ËØ∑Ê≠£Á°ÆÂ°´ÂÜôË°®Âçï');
    }
  }
  addMsg() {
    const data = {
      ...this.msgBoardData.value,
      name: this.msgBoardData.value.name.slice(0, 10),
    };
    if (this.fatherMsgId) data.fatherMsgId = this.fatherMsgId;
    if (this.articleId) data.articleId = this.articleId;
    if (this.isMsgBoard) {
      this.subscriptionList.push(
        this.boardMsgService
          .addMsgForBoard(data)
          .subscribe((res: resType<any>) => {
            if (res.code === 200) {
              this.message.success('ËØÑËÆ∫ÊàêÂäüÔºåÂçö‰∏ªÂÆ°Ê†∏ÂêéÊâçËÉΩË¢´Âà´‰∫∫ÁúãËßÅo~~');
              const msgCache = JSON.parse(
                localStorage.getItem('msgCacheForAll') as any,
              );
              localStorage.setItem(
                'msgCacheForAll',
                JSON.stringify(
                  msgCache
                    ? [...msgCache, { ...res.data, isLocal: true }]
                    : [{ ...res.data, isLocal: true }],
                ),
              );
              this.msgBoardData.reset();
              this.reloadMsg.emit();
            } else {
              this.message.warning(res.msg as string);
            }
          }),
      );
    } else {
      this.subscriptionList.push(
        this.boardMsgService
          .addMsgForArticle(data)
          .subscribe((res: resType<any>) => {
            if (res.code === 200) {
              this.message.success('ËØÑËÆ∫ÊàêÂäüÔºåÂçö‰∏ªÂÆ°Ê†∏ÂêéÊâçËÉΩË¢´Âà´‰∫∫ÁúãËßÅo~~');
              const msgCache = JSON.parse(
                localStorage.getItem('msgCacheForArticle') as any,
              );
              localStorage.setItem(
                'msgCacheForArticle',
                JSON.stringify(
                  msgCache
                    ? [...msgCache, { ...res.data, isLocal: true }]
                    : [{ ...res.data, isLocal: true }],
                ),
              );
              this.msgBoardData.reset();
              this.reloadMsg.emit();
            } else {
              this.message.warning(res.msg as string);
            }
          }),
      );
    }
  }
  addEmoji(emoji: any) {
    this.content?.setValue(this.content.value + emoji);
  }
  ngOnInit(): void {
    this.subscriptionList.push(
      this.route.url.subscribe((res) => {
        this.isMsgBoard = res[0].path === 'msgboard' ? true : false;
      }),
    );
    this.emojis = this.emojis.split(',');
  }
  constructor(
    private message: NzMessageService,
    private boardMsgService: BoardMsgService,
    private route: ActivatedRoute,
    private store: Store<{ smallSize: boolean }>,
  ) {
    this.smallSize = store.select('smallSize');
  }
  ngOnDestroy(): void {
    this.subscriptionList.forEach((subscripion) => {
      subscripion.unsubscribe();
    });
  }
}
